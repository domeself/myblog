---
layout: post
title:  "分布式架构"
categories: springCloud
tags: springCloud
author: supernova
description: 分布式架构.
---
## 分布式架构的目的
### 提高系统性能
系统性能的好坏的指标，主要是指吞吐量和响应时间。  
吞吐量是用来衡量系统可同时处理用户访问的数值。
响应时间是指从用户发出请求到服务端的网络传输时间+服务端的处理时间+服务端到用户端的网络传输时间+用户端渲染页面的时间。  
系统的性能是由响应时间和吞吐量共同决定的。
#### 系统缓存
系统缓存可以有效的加快系统的读写力能(主要是读)，降低响应速度。从前端的浏览器，到网络(CDN)，再到后端的
服务(本地缓存，分布式缓存redis)，底层的数据库、文件系统、硬盘和CPU，全都有缓存，这是提高快速访问能力最有效的手段。
#### 负载均衡
负载均衡是水平扩展的关键技术，多台机器分担流量。
#### 异步调用
异步系统主要通过消息队列来对请求做排队处理，起到消峰的作用。所以它既提高吞吐量也减小了响应时间。
但是也会造成时效性差，而且还可能丢失数据。
#### 数据镜像
将数据源复制成多份，可以主写、从读。缺点是增加了编程难度和主从同步时产生的数据一致性问题。
### 提高系统稳定性
#### 服务拆分
服务拆分可以做到故障隔离和模块重用。但是会产生各个模块之间调用的依赖关系。
#### 服务冗余
服务冗余能做到弹性伸缩，低峰的时候去除闲置服务，高峰的时候增加应用服务。人为操作困难最好能做到系统自动伸缩。  
对于有状态的服务来说，伸缩的时候必须要做重新分区和数据的迁移。
#### 流量控制
当同个模块的多个服务流量偏移很大时，通过负载均衡和路由进行调节。
在系统的吞吐量已经达到极限时，为了保障系统的可用性会功能进行限流或者降级来停掉一部分服务。
#### 高可用运维
庞大的系统如果用人工来维护，不仅耗时耗力，而且对性能把控能力和故障的应激处理能力都不会比系统自己来的准确和快速。
一个高可用的运维系统至少要做到：
* 自动化的集成和发布
* 核心功能的实时监控和预警
* 故障的自动隔离和恢复
* 自动化的测试和输出结果

## 分布式系统的事务

